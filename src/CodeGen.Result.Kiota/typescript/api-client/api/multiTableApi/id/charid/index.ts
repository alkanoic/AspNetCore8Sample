/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { createMultiTableFromDiscriminatorValue, deserializeIntoMultiTable, serializeMultiTable, type MultiTable } from '../../../../models/';
import { BaseRequestBuilder, HttpMethod, RequestInformation, type Parsable, type ParsableFactory, type RequestAdapter, type RequestConfiguration, type RequestOption } from '@microsoft/kiota-abstractions';

export interface CharidRequestBuilderDeleteQueryParameters {
    charid?: string;
    id?: number;
}
export interface CharidRequestBuilderGetQueryParameters {
    charid?: string;
    id?: number;
}
export interface CharidRequestBuilderPutQueryParameters {
    charid?: string;
    id?: number;
}
/**
 * Builds and executes requests for operations under /api/MultiTableApi/id/charid
 */
export class CharidRequestBuilder extends BaseRequestBuilder<CharidRequestBuilder> {
    /**
     * Instantiates a new CharidRequestBuilder and sets the default values.
     * @param pathParameters The raw url or the Url template parameters for the request.
     * @param requestAdapter The request adapter to use to execute the requests.
     */
    public constructor(pathParameters: Record<string, unknown> | string | undefined, requestAdapter: RequestAdapter) {
        super(pathParameters, requestAdapter, "{+baseurl}/api/MultiTableApi/id/charid{?id*,charid*}", (x, y) => new CharidRequestBuilder(x, y));
    }
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ArrayBuffer
     */
    public delete(requestConfiguration?: RequestConfiguration<CharidRequestBuilderDeleteQueryParameters> | undefined) : Promise<ArrayBuffer | undefined> {
        const requestInfo = this.toDeleteRequestInformation(
            requestConfiguration
        );
        return this.requestAdapter.sendPrimitiveAsync<ArrayBuffer>(requestInfo, "ArrayBuffer", undefined);
    }
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of MultiTable
     */
    public get(requestConfiguration?: RequestConfiguration<CharidRequestBuilderGetQueryParameters> | undefined) : Promise<MultiTable | undefined> {
        const requestInfo = this.toGetRequestInformation(
            requestConfiguration
        );
        return this.requestAdapter.sendAsync<MultiTable>(requestInfo, createMultiTableFromDiscriminatorValue, undefined);
    }
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a Promise of ArrayBuffer
     */
    public put(body: MultiTable, requestConfiguration?: RequestConfiguration<CharidRequestBuilderPutQueryParameters> | undefined) : Promise<ArrayBuffer | undefined> {
        const requestInfo = this.toPutRequestInformation(
            body, requestConfiguration
        );
        return this.requestAdapter.sendPrimitiveAsync<ArrayBuffer>(requestInfo, "ArrayBuffer", undefined);
    }
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toDeleteRequestInformation(requestConfiguration?: RequestConfiguration<CharidRequestBuilderDeleteQueryParameters> | undefined) : RequestInformation {
        const requestInfo = new RequestInformation(HttpMethod.DELETE, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/octet-stream");
        return requestInfo;
    }
    /**
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toGetRequestInformation(requestConfiguration?: RequestConfiguration<CharidRequestBuilderGetQueryParameters> | undefined) : RequestInformation {
        const requestInfo = new RequestInformation(HttpMethod.GET, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/json");
        return requestInfo;
    }
    /**
     * @param body The request body
     * @param requestConfiguration Configuration for the request such as headers, query parameters, and middleware options.
     * @returns a RequestInformation
     */
    public toPutRequestInformation(body: MultiTable, requestConfiguration?: RequestConfiguration<CharidRequestBuilderPutQueryParameters> | undefined) : RequestInformation {
        if(!body) throw new Error("body cannot be undefined");
        const requestInfo = new RequestInformation(HttpMethod.PUT, this.urlTemplate, this.pathParameters);
        requestInfo.configure(requestConfiguration);
        requestInfo.headers.tryAdd("Accept", "application/octet-stream");
        requestInfo.setContentFromParsable(this.requestAdapter, "application/json", body, serializeMultiTable);
        return requestInfo;
    }
}
/* tslint:enable */
/* eslint-enable */

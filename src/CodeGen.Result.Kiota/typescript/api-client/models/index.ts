/* tslint:disable */
/* eslint-disable */
// Generated by Microsoft Kiota
import { type DateOnly, type Parsable, type ParseNode, type SerializationWriter } from '@microsoft/kiota-abstractions';

export function createMultiTableFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoMultiTable;
}
export function createSampleTableFromDiscriminatorValue(parseNode: ParseNode | undefined) {
    return deserializeIntoSampleTable;
}
export function deserializeIntoMultiTable(multiTable: MultiTable | undefined = {} as MultiTable) : Record<string, (node: ParseNode) => void> {
    return {
        "charid": n => { multiTable.charid = n.getStringValue(); },
        "createAt": n => { multiTable.createAt = n.getDateValue(); },
        "createUser": n => { multiTable.createUser = n.getStringValue(); },
        "id": n => { multiTable.id = n.getNumberValue(); },
        "targetBit": n => { multiTable.targetBit = n.getNumberValue(); },
        "targetDate": n => { multiTable.targetDate = n.getDateOnlyValue(); },
        "targetDecimal": n => { multiTable.targetDecimal = n.getNumberValue(); },
        "targetInt": n => { multiTable.targetInt = n.getNumberValue(); },
        "targetName": n => { multiTable.targetName = n.getStringValue(); },
        "updateAt": n => { multiTable.updateAt = n.getDateValue(); },
        "updateUser": n => { multiTable.updateUser = n.getStringValue(); },
    }
}
export function deserializeIntoSampleTable(sampleTable: SampleTable | undefined = {} as SampleTable) : Record<string, (node: ParseNode) => void> {
    return {
        "createAt": n => { sampleTable.createAt = n.getDateValue(); },
        "createUser": n => { sampleTable.createUser = n.getStringValue(); },
        "id": n => { sampleTable.id = n.getNumberValue(); },
        "targetBit": n => { sampleTable.targetBit = n.getNumberValue(); },
        "targetDate": n => { sampleTable.targetDate = n.getDateOnlyValue(); },
        "targetDecimal": n => { sampleTable.targetDecimal = n.getNumberValue(); },
        "targetInt": n => { sampleTable.targetInt = n.getNumberValue(); },
        "targetName": n => { sampleTable.targetName = n.getStringValue(); },
        "updateAt": n => { sampleTable.updateAt = n.getDateValue(); },
        "updateUser": n => { sampleTable.updateUser = n.getStringValue(); },
    }
}
export interface MultiTable extends Parsable {
    /**
     * The charid property
     */
    charid?: string;
    /**
     * The createAt property
     */
    createAt?: Date;
    /**
     * The createUser property
     */
    createUser?: string;
    /**
     * The id property
     */
    id?: number;
    /**
     * The targetBit property
     */
    targetBit?: number;
    /**
     * The targetDate property
     */
    targetDate?: DateOnly;
    /**
     * The targetDecimal property
     */
    targetDecimal?: number;
    /**
     * The targetInt property
     */
    targetInt?: number;
    /**
     * The targetName property
     */
    targetName?: string;
    /**
     * The updateAt property
     */
    updateAt?: Date;
    /**
     * The updateUser property
     */
    updateUser?: string;
}
export interface SampleTable extends Parsable {
    /**
     * The createAt property
     */
    createAt?: Date;
    /**
     * The createUser property
     */
    createUser?: string;
    /**
     * The id property
     */
    id?: number;
    /**
     * The targetBit property
     */
    targetBit?: number;
    /**
     * The targetDate property
     */
    targetDate?: DateOnly;
    /**
     * The targetDecimal property
     */
    targetDecimal?: number;
    /**
     * The targetInt property
     */
    targetInt?: number;
    /**
     * The targetName property
     */
    targetName?: string;
    /**
     * The updateAt property
     */
    updateAt?: Date;
    /**
     * The updateUser property
     */
    updateUser?: string;
}
export function serializeMultiTable(writer: SerializationWriter, multiTable: MultiTable | undefined = {} as MultiTable) : void {
    writer.writeStringValue("charid", multiTable.charid);
    writer.writeDateValue("createAt", multiTable.createAt);
    writer.writeStringValue("createUser", multiTable.createUser);
    writer.writeNumberValue("id", multiTable.id);
    writer.writeNumberValue("targetBit", multiTable.targetBit);
    writer.writeDateOnlyValue("targetDate", multiTable.targetDate);
    writer.writeNumberValue("targetDecimal", multiTable.targetDecimal);
    writer.writeNumberValue("targetInt", multiTable.targetInt);
    writer.writeStringValue("targetName", multiTable.targetName);
    writer.writeDateValue("updateAt", multiTable.updateAt);
    writer.writeStringValue("updateUser", multiTable.updateUser);
}
export function serializeSampleTable(writer: SerializationWriter, sampleTable: SampleTable | undefined = {} as SampleTable) : void {
    writer.writeDateValue("createAt", sampleTable.createAt);
    writer.writeStringValue("createUser", sampleTable.createUser);
    writer.writeNumberValue("id", sampleTable.id);
    writer.writeNumberValue("targetBit", sampleTable.targetBit);
    writer.writeDateOnlyValue("targetDate", sampleTable.targetDate);
    writer.writeNumberValue("targetDecimal", sampleTable.targetDecimal);
    writer.writeNumberValue("targetInt", sampleTable.targetInt);
    writer.writeStringValue("targetName", sampleTable.targetName);
    writer.writeDateValue("updateAt", sampleTable.updateAt);
    writer.writeStringValue("updateUser", sampleTable.updateUser);
}
/* tslint:enable */
/* eslint-enable */

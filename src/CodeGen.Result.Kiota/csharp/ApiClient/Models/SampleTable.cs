// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace ApiSdk.Models {
    public class SampleTable : IParsable {
        /// <summary>The createAt property</summary>
        public DateTimeOffset? CreateAt { get; set; }
        /// <summary>The createUser property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreateUser { get; set; }
#nullable restore
#else
        public string CreateUser { get; set; }
#endif
        /// <summary>The id property</summary>
        public int? Id { get; set; }
        /// <summary>The targetBit property</summary>
        public int? TargetBit { get; set; }
        /// <summary>The targetDate property</summary>
        public Date? TargetDate { get; set; }
        /// <summary>The targetDecimal property</summary>
        public decimal? TargetDecimal { get; set; }
        /// <summary>The targetInt property</summary>
        public int? TargetInt { get; set; }
        /// <summary>The targetName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TargetName { get; set; }
#nullable restore
#else
        public string TargetName { get; set; }
#endif
        /// <summary>The updateAt property</summary>
        public DateTimeOffset? UpdateAt { get; set; }
        /// <summary>The updateUser property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UpdateUser { get; set; }
#nullable restore
#else
        public string UpdateUser { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static SampleTable CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new SampleTable();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"createAt", n => { CreateAt = n.GetDateTimeOffsetValue(); } },
                {"createUser", n => { CreateUser = n.GetStringValue(); } },
                {"id", n => { Id = n.GetIntValue(); } },
                {"targetBit", n => { TargetBit = n.GetIntValue(); } },
                {"targetDate", n => { TargetDate = n.GetDateValue(); } },
                {"targetDecimal", n => { TargetDecimal = n.GetDecimalValue(); } },
                {"targetInt", n => { TargetInt = n.GetIntValue(); } },
                {"targetName", n => { TargetName = n.GetStringValue(); } },
                {"updateAt", n => { UpdateAt = n.GetDateTimeOffsetValue(); } },
                {"updateUser", n => { UpdateUser = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDateTimeOffsetValue("createAt", CreateAt);
            writer.WriteStringValue("createUser", CreateUser);
            writer.WriteIntValue("id", Id);
            writer.WriteIntValue("targetBit", TargetBit);
            writer.WriteDateValue("targetDate", TargetDate);
            writer.WriteDecimalValue("targetDecimal", TargetDecimal);
            writer.WriteIntValue("targetInt", TargetInt);
            writer.WriteStringValue("targetName", TargetName);
            writer.WriteDateTimeOffsetValue("updateAt", UpdateAt);
            writer.WriteStringValue("updateUser", UpdateUser);
        }
    }
}

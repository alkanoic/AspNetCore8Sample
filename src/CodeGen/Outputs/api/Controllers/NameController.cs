using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using AspNetCoreSample.Templates.Models;

namespace AspNetCoreSample.WebApi;

/// <summary>
/// This code is automatically generated by CodeGen Api command
/// </summary>
[Authorize]
[Route("api/[controller]")]
[ApiController]
public class NameApiController : ControllerBase
{
    private readonly SampleContext _context;

    public NameApiController(SampleContext context)
    {
        _context = context;
    }

    // GET: @routePrefix
    [HttpGet]
    public async ValueTask<ActionResult<IEnumerable<Name>>> Get()
    {
        return await _context.Names.ToListAsync();
    }

    // GET: @routePrefix/5
    [HttpGet("id")]
    public async ValueTask<ActionResult<Name>> Get(int id)
    {
        var target = _context.Names.AsNoTracking();
        target = target.Where(x => x.Id == id);
        var result = await target.SingleOrDefaultAsync();

        if (result == null)
        {
            return NotFound();
        }
        return result;
    }

    // PUT: @routePrefix/5
    // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
    [HttpPut("id")]
    public async ValueTask<IActionResult> Put(int id, Name target)
    {
        if (target.Id != id)
        {
            return BadRequest();
        }

        _context.Entry(target).State = EntityState.Modified;

        try
        {
            await _context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!Exists(id))
            {
                return NotFound();
            }
            else
            {
                throw;
            }
        }

        return NoContent();
    }

    // POST: @routePrefix
    // To protect from overposting attacks, see https://go.microsoft.com/fwlink/?linkid=2123754
    [HttpPost]
    public async ValueTask<ActionResult<Name>> Post(Name target)
    {
        _context.Names.Add(target);

        try
        {
            await _context.SaveChangesAsync();
        }
        catch (DbUpdateException)
        {
            if (Exists(target.Id))
            {
                return Conflict();
            }
            else
            {
                throw;
            }
        }

        return CreatedAtAction("Get", new { id = target.Id }, target);
    }

    // DELETE: @routePrefix/5
    [HttpDelete("id")]
    public async ValueTask<IActionResult> Delete(int id)
    {
        var target = _context.Names.AsNoTracking();
        target = target.Where(x => x.Id == id);
        var result = await target.SingleOrDefaultAsync();

        if (result == null)
        {
            return NotFound();
        }

        _context.Names.Remove(result);
        await _context.SaveChangesAsync();

        return NoContent();
    }

    private bool Exists(int id)
    {
        var target = _context.Names.AsNoTracking();
        target = target.Where(x => x.Id == id);
        return target.Any();
    }
}

@{
  ViewData["Title"] = "Map Page";
}

@section Styles {
  <style>
    #map {
      height: calc(100vh - 64px - 60px - 40px);
    }

    textarea {
      width: 100%;
    }
  </style>
  <!-- LeafletのCSSとJSライブラリを読み込む -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
    integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
    integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
}

<h2>地図上に緯度経度1と緯度経度2間の線をマッピングします</h2>
<div>
  次のCSVの形式で入力してください<br />
  緯度1,経度1,緯度2,経度2<br />
  35.681236, 139.767125, 34.693738, 135.502165<br />
  35, 139, 34, 135<br />
</div>
<div>
  <textarea id="latlngs" rows="5" cols="40"></textarea>
  <button onclick="addLatLng()">追加</button>
  <input type="checkbox" id="repeatAnimation" checked> Repeat Animation
  <input type="checkbox" id="animation" checked> Animation
</div>

<!-- 地図を表示するためのdiv要素 -->
<div id="map"></div>

@section Scripts {
  <script src="https://unpkg.com/papaparse@latest/papaparse.min.js"></script>
  <script src="https://unpkg.com/leaflet.polyline.snakeanim@latest/L.Polyline.SnakeAnim.js"></script>
  <script>
    const urlParams = new URLSearchParams(window.location.search);
    let lat = urlParams.get('lat') || 35;
    let lng = urlParams.get('lng') || 135;
    let zoom = urlParams.get('zoom') || 5;

    // 地図オブジェクトを生成し、OpenStreetMapの画像タイルを読み込む
    var map = L.map('map').setView([lat, lng], zoom); // 地図の中心とズームレベルを設定
    var tileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '© <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors'
    });
    tileLayer.addTo(map);

    map.on('moveend zoomend', updateUrlParameters);

    var lines = [];

    // ボタンがクリックされたときの関数
    function addLatLng() {
      const textarea = document.getElementById('latlngs').value;
      console.log(textarea);

      // 緯度経度の配列を空で作成
      var latlngs = [];

      Papa.parse(textarea, {
        header: false, // ヘッダー行があるかどうか
        dynamicTyping: true, // 数値や真偽値を自動的に変換するかどうか
        complete: function (results) { // パース完了後のコールバック関数
          console.log(results.data); // パースされたデータ（配列やオブジェクト）を表示

          // 緯度と経度が有効な値かチェック
          results.data.forEach((x) => {
            if (x.length === 4) {
              validateLatLng(x[0], [1]);
              validateLatLng(x[2], [3]);
              latlngs.push([
                [x[0], x[1]],
                [x[2], x[3]]
              ]);
            }
          });
        },
        error: function (error) { // パース失敗時のコールバック関数
          console.error(error); // エラー情報を表示
        }
      });

      if (lines) {
        lines.forEach(line => {
          map.removeLayer(line);
        })
      }

      // 各座標配列に対してポリラインを作成し、アニメーションを開始
      latlngs.forEach(latlng => {
        const polyline = L.polyline(latlng, {
          color: getRandomColorfulColor()
        });
        lines.push(polyline);
        polyline.addTo(map);

        const animationCheckbox = document.getElementById('animation');
        // snakeend イベントのリスナーを作成
        polyline.on('snakeend', function () {
          const repeatCheckbox = document.getElementById('repeatAnimation');
          if (repeatCheckbox.checked) {
            // アニメーションをリセット
            this._snaking = false;

            // アニメーションを再開始
            this.snakeIn();
          }
        });
        if (animationCheckbox.checked) {
          polyline.snakeIn();
        }
      });
    }

    function validateLatLng(lat, lng) {
      if (isNaN(lat) || isNaN(lng) || lat < -90 || lat > 90 || lng < -180 || lng > 180) {
        // 無効な値ならアラートを表示
        alert(`${lat}, ${lng} 緯度と経度は数値で、緯度は-90から90まで、経度は-180から180までの範囲で入力してください。`);
        return false;
      }
      return true;
    }

    // カラフルな色のセットを定義
    const colorfulColors = [
      '#FF0000',  // Red
      '#FF7F00',  // Orange
      '#FFFF00',  // Yellow
      '#7FFF00',  // Chartreuse
      '#00FF00',  // Green
      '#00FF7F',  // Spring Green
      '#00FFFF',  // Cyan
      '#007FFF',  // Azure
      '#0000FF',  // Blue
      '#7F00FF',  // Violet
      '#FF00FF',  // Magenta
      '#FF007F'   // Rose
    ];

    // ランダムにカラフルな色を選択する関数
    function getRandomColorfulColor() {
      const randomIndex = Math.floor(Math.random() * colorfulColors.length);
      return colorfulColors[randomIndex];
    }

    function updateUrlParameters() {
      const center = map.getCenter();
      const zoom = map.getZoom();
      const newUrlParams = new URLSearchParams(window.location.search);
      newUrlParams.set('lat', center.lat.toFixed(4));
      newUrlParams.set('lng', center.lng.toFixed(4));
      newUrlParams.set('zoom', zoom);
      const newUrl = window.location.origin + window.location.pathname + '?' + newUrlParams.toString();
      history.replaceState(null, '', newUrl);
    }

  </script>
}

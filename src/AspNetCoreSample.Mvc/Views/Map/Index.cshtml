@{
  ViewData["Title"] = "Map Page";
}

@section Styles {
  <style>
    #map {
      height: calc(100vh - 64px - 60px - 40px);
    }

    textarea {
      width: 100%;
    }
  </style>
  <!-- LeafletのCSSとJSライブラリを読み込む -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
    integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin="" />
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
    integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
}

<h4>1. 地図上に緯度経度1と緯度経度2間の線をマッピングします</h4>
<div>
  次のCSVの形式で入力してください<br />
  緯度1,経度1,緯度2,経度2<br />
  35.681236, 139.767125, 34.693738, 135.502165<br />
  35, 139, 34, 135<br />
  <textarea id="latlngs" rows="5" cols="40" class="form-control">35.681236, 139.767125, 34.693738, 135.502165</textarea>
  <div class="mt-2">
    <button class="btn btn-primary" onclick="addLatLng()">追加</button>
    <button class="btn btn-primary ml-2" onclick="addStartHeatmap()">開始地点のヒートマップを追加</button>
    <button class="btn btn-primary ml-2" onclick="addEndHeatmap()">到着地点のヒートマップを追加</button>
  </div>
</div>

<h4 class="mt-2">2. 地図上にマーカーをマッピングします</h4>
<div>
  次のCSVの形式で入力してください<br />
  場所名,緯度,経度<br />
  Tokyo,35.681236,139.767125<br />
  <textarea id="locations" rows="5" cols="40" class="form-control">Tokyo,35.681236,139.767125</textarea>
  <button class="btn btn-primary mt-2" onclick="addLocation()">追加</button>
  <div class="row">
    <label for="distance" class="col-form-label col-4">特定の距離 (km):</label>
    <div class="col-8">
      <input type="number" id="distance" name="distance" value="1" class="form-control">
    </div>
  </div>
</div>

<!-- 特定の距離以下のマーカーの集計 -->
<h4>3. 特定の距離以下のマーカーを集計した結果を表示します</h4>
<div>
  場所名,緯度,経度,開始地点件数,到着地点件数<br />
  <textarea id="location_result" class="form-control"></textarea>
</div>

<div class="d-flex align-items-center mt-2 gap-3">
  <div class="form-check">
    <input type="checkbox" id="repeatAnimation" class="form-check-input" checked>
    <label class="form-check-label" for="repeatAnimation">Repeat Animation</label>
  </div>
  <div class="form-check">
    <input type="checkbox" id="animation" class="form-check-input" checked>
    <label class="form-check-label" for="animation">Animation</label>
  </div>
</div>

<!-- 地図を表示するためのdiv要素 -->
<div class="mt-2" id="map"></div>

@section Scripts {
  <script src="https://unpkg.com/papaparse@latest/papaparse.min.js"></script>
  <script src="https://unpkg.com/leaflet.polyline.snakeanim@latest/L.Polyline.SnakeAnim.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/leaflet.heat/dist/leaflet-heat.min.js"></script>
  <script>
    const urlParams = new URLSearchParams(window.location.search);
    let lat = urlParams.get('lat') || 35;
    let lng = urlParams.get('lng') || 135;
    let zoom = urlParams.get('zoom') || 5;

    // 地図オブジェクトを生成し、OpenStreetMapの画像タイルを読み込む
    var map = L.map('map').setView([lat, lng], zoom); // 地図の中心とズームレベルを設定
    var tileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '© <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors'
    });
    tileLayer.addTo(map);

    map.on('moveend zoomend', updateUrlParameters);

    var lines = [];
    var latlngs = [];

    var heat = L.heatLayer([]).addTo(map);

    function addStartHeatmap() {
      map.removeLayer(heat); // 既存のヒートマップを削除

      const textarea = document.getElementById('latlngs').value;
      heat = L.heatLayer([]).addTo(map);

      Papa.parse(textarea, {
        header: false,
        dynamicTyping: true,
        complete: function (results) {
          results.data.forEach(function (row) {
            if (row[0] != null && row[1] != null) {
              heat.addLatLng([row[0], row[1]]);
            }
          });
        }
      });
    }

    function addEndHeatmap() {
      map.removeLayer(heat); // 既存のヒートマップを削除

      const textarea = document.getElementById('latlngs').value;
      heat = L.heatLayer([]).addTo(map);

      Papa.parse(textarea, {
        header: false,
        dynamicTyping: true,
        complete: function (results) {
          results.data.forEach(function (row) {
            if (row[2] != null && row[3] != null) {
              heat.addLatLng([row[2], row[3]]);
            }
          });
        }
      });
    }

    // ボタンがクリックされたときの関数
    function addLatLng() {
      const textarea = document.getElementById('latlngs').value;
      console.log(textarea);

      // 緯度経度の配列を空で作成
      latlngs = [];

      Papa.parse(textarea, {
        header: false, // ヘッダー行があるかどうか
        dynamicTyping: true, // 数値や真偽値を自動的に変換するかどうか
        complete: function (results) { // パース完了後のコールバック関数
          console.log(results.data); // パースされたデータ（配列やオブジェクト）を表示

          // 緯度と経度が有効な値かチェック
          results.data.forEach((x) => {
            if (x.length === 4) {
              validateLatLng(x[0], [1]);
              validateLatLng(x[2], [3]);
              latlngs.push([
                [x[0], x[1]],
                [x[2], x[3]]
              ]);
            }
          });
        },
        error: function (error) { // パース失敗時のコールバック関数
          console.error(error); // エラー情報を表示
        }
      });

      if (lines) {
        lines.forEach(line => {
          map.removeLayer(line);
        })
      }

      // 各座標配列に対してポリラインを作成し、アニメーションを開始
      latlngs.forEach(latlng => {
        const color = getRandomColorfulColor()
        const polyline = L.polyline(latlng, {
          color: color
        });
        lines.push(polyline);
        polyline.addTo(map);

        // 開始地点と終了地点の座標を取得
        const startPoint = latlng[0];
        const endPoint = latlng[latlng.length - 1];

        // 'S' と 'E' の文字を含むカスタムアイコンを作成
        const startIcon = L.divIcon({
          className: 'custom-icon',
          html: '<div style="background-color: green; color: white; padding: 5px; border-radius: 50%;">S</div>',
          iconSize: [20, 20]
        });

        const endIcon = L.divIcon({
          className: 'custom-icon',
          html: '<div style="background-color: red; color: white; padding: 5px; border-radius: 50%;">E</div>',
          iconSize: [20, 20]
        });

        // 開始地点と終了地点にマーカーを作成し、マップに追加
        const startMarker = L.marker(startPoint, { icon: startIcon });
        const endMarker = L.marker(endPoint, { icon: endIcon });

        startMarker.addTo(map);
        endMarker.addTo(map);

        const animationCheckbox = document.getElementById('animation');
        // snakeend イベントのリスナーを作成
        polyline.on('snakeend', function () {
          const repeatCheckbox = document.getElementById('repeatAnimation');
          if (repeatCheckbox.checked) {
            // アニメーションをリセット
            this._snaking = false;

            // アニメーションを再開始
            this.snakeIn();
          }
        });
        if (animationCheckbox.checked) {
          polyline.snakeIn();
        }
      });
    }

    function validateLatLng(lat, lng) {
      if (isNaN(lat) || isNaN(lng) || lat < -90 || lat > 90 || lng < -180 || lng > 180) {
        // 無効な値ならアラートを表示
        alert(`${lat}, ${lng} 緯度と経度は数値で、緯度は-90から90まで、経度は-180から180までの範囲で入力してください。`);
        return false;
      }
      return true;
    }

    // カラフルな色のセットを定義
    const colorfulColors = [
      '#FF0000',  // Red
      '#FF7F00',  // Orange
      '#FFFF00',  // Yellow
      '#7FFF00',  // Chartreuse
      '#00FF00',  // Green
      '#00FF7F',  // Spring Green
      '#00FFFF',  // Cyan
      '#007FFF',  // Azure
      '#0000FF',  // Blue
      '#7F00FF',  // Violet
      '#FF00FF',  // Magenta
      '#FF007F'   // Rose
    ];

    // ランダムにカラフルな色を選択する関数
    function getRandomColorfulColor() {
      const randomIndex = Math.floor(Math.random() * colorfulColors.length);
      return colorfulColors[randomIndex];
    }

    function updateUrlParameters() {
      const center = map.getCenter();
      const zoom = map.getZoom();
      const newUrlParams = new URLSearchParams(window.location.search);
      newUrlParams.set('lat', center.lat.toFixed(4));
      newUrlParams.set('lng', center.lng.toFixed(4));
      newUrlParams.set('zoom', zoom);
      const newUrl = window.location.origin + window.location.pathname + '?' + newUrlParams.toString();
      history.replaceState(null, '', newUrl);
    }

    // マーカーのリストを保持するための配列を作成
    var markers = [];

    function addLocation() {
      const textarea = document.getElementById('locations').value;
      console.log(textarea);

      // 場所の配列を空で作成
      var locations = [];

      Papa.parse(textarea, {
        header: false, // ヘッダー行があるかどうか
        dynamicTyping: true, // 数値や真偽値を自動的に変換するかどうか
        complete: function (results) { // パース完了後のコールバック関数
          console.log(results.data); // パースされたデータ（配列やオブジェクト）を表示

          // 緯度と経度が有効な値かチェック
          results.data.forEach((x) => {
            if (x.length === 3) {
              validateLatLng(x[1], x[2]);
              locations.push({
                name: x[0],
                lat: x[1],
                lng: x[2]
              });
            }
          });
        },
        error: function (error) { // パース失敗時のコールバック関数
          console.error(error); // エラー情報を表示
        }
      });

      // 既存のマーカーを削除
      markers.forEach(marker => {
        map.removeLayer(marker);
      });

      // マーカーのリストを空にする
      markers = [];

      let csvContent = "";
      // 各場所に対してマーカーを作成し、地図に追加
      locations.forEach(location => {
        const marker = L.marker([location.lat, location.lng]);

        // 特定の距離内にある開始地点と到着地点の数を集計
        let startPointsCount = 0;
        let endPointsCount = 0;
        const distance = document.getElementById('distance').value;
        latlngs.forEach(latlng => {
          const startPointDistance = calculateDistance(location.lat, location.lng, latlng[0][0], latlng[0][1]);
          const endPointDistance = calculateDistance(location.lat, location.lng, latlng[1][0], latlng[1][1]);
          if (startPointDistance <= distance) {
            startPointsCount++;
          }
          if (endPointDistance <= distance) {
            endPointsCount++;
          }
        });

        // 集計結果をCSV形式で表示
        csvContent += `"${location.name}",${location.lat},${location.lng},${startPointsCount},${endPointsCount}\n`;

        // 集計結果をマーカーの名称に追加
        const nameWithCounts = `${location.name} (Start Points: ${startPointsCount}, End Points: ${endPointsCount})`;
        marker.bindPopup(nameWithCounts); // ポップアップに場所名を表示
        marker.addTo(map);

        // マーカーをリストに追加
        markers.push(marker);
      });
      document.getElementById("location_result").value = csvContent;
    }

    // Haversine公式を使用して2点間の距離を計算する関数
    function calculateDistance(lat1, lon1, lat2, lon2) {
      var R = 6371; // 地球の半径 (km)
      var dLat = deg2rad(lat2 - lat1);
      var dLon = deg2rad(lon2 - lon1);
      var a =
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
        Math.sin(dLon / 2) * Math.sin(dLon / 2)
        ;
      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      var d = R * c; // 距離 (km)
      return d;
    }

    function deg2rad(deg) {
      return deg * (Math.PI / 180)
    }
  </script>
}

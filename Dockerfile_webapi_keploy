# https://hub.docker.com/_/microsoft-dotnet
FROM --platform=$BUILDPLATFORM mcr.microsoft.com/dotnet/sdk:8.0 AS build
WORKDIR /source

# copy csproj and restore as distinct layers
COPY *.sln .
COPY src/AspNetCoreSample.WebApi/AspNetCoreSample.WebApi.csproj ./src/AspNetCoreSample.WebApi/
COPY src/AspNetCoreSample.ServiceDefaults/AspNetCoreSample.ServiceDefaults.csproj ./src/AspNetCoreSample.ServiceDefaults/
WORKDIR /source/src/AspNetCoreSample.WebApi
RUN dotnet restore

# copy everything else and build app
WORKDIR /source
COPY src/AspNetCoreSample.WebApi/. ./src/AspNetCoreSample.WebApi/
COPY src/AspNetCoreSample.ServiceDefaults/. ./src/AspNetCoreSample.ServiceDefaults/
WORKDIR /source/src/AspNetCoreSample.WebApi
RUN dotnet publish -c release -o /app --no-restore

# final stage/image
FROM --platform=$BUILDPLATFORM mcr.microsoft.com/dotnet/aspnet:8.0.0
WORKDIR /app
COPY --from=build /app ./
RUN apt-get update && apt-get install -y curl
# Download the ca.crt file
RUN curl -o ca.crt  https://raw.githubusercontent.com/keploy/keploy/main/pkg/core/proxy/asset/ca.crt
RUN curl -o setup_ca.sh https://raw.githubusercontent.com/keploy/keploy/main/pkg/core/proxy/asset/setup_ca.sh
# Give execute permission to the setup_ca.sh script
RUN chmod +x setup_ca.sh

# Run the CA setup script and then run the application server
CMD ["/bin/bash", "-c", "source ./setup_ca.sh && dotnet AspNetCoreSample.WebApi.dll"]
